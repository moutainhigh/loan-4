# Log4j2日志配置
Configuration:
    # 自定义变量
    Properties:
        Property:
            - name: log.path
              value: logs
            - name: project.name
              value: loanCust
            - name: project.package
              value: com.aoying.loan

    # 设置log4j2自身内部的信息输出,可以不设置,当设置成trace时,会看到log4j2内部各种详细输出
    status: WARN

    Appenders:
        # 输出到控制台
        Console:
            name: Console
            target: SYSTEM_OUT
            # 控制台只输出level及以上级别的信息(onMatch),其他的直接拒绝(onMismatch)
            ThresholdFilter:
                level: TRACE
                onMatch: ACCEPT
                onMismatch: DENY
            PatternLayout:
                pattern: "[%d{MM-dd HH:mm:ss.SSS} %5p %25.25c] %25.25t: %m%n"

        # 输出到文件
        RollingFile:
            name: RollingFile
            ignoreExceptions: false
            # 设置日志文件格式
            fileName: "${log.path}/${project.name}.log"
            # 设置日志文件超过大小时压缩文件的格式
            filePattern: "${log.path}/$${date:yyyy-MM}/${project.name}-%d{yyyy-MM-dd}-%i.log.gz"
            PatternLayout:
                pattern: "[%d{MM-dd HH:mm:ss.SSS} %5p %25.25c] %25.25t: %m%n"
            # 设置日志文件大小，超过大小时会自动压缩
            Policies:
                SizeBasedTriggeringPolicy:
                    size: "10 MB"
            # 设置压缩文件的个数，超过时会自动删除
            DefaultRolloverStrategy:
                max: 100

    Loggers:
        Root:
            level: WARN
            AppenderRef:
                - ref: Console
                - ref: RollingFile
        Logger:
            - name: ${project.package}
              level: INFO
#              # 设置AppenderRef之后，将additivity设置为false，那么这个日志不会再向父Logger传递，避免多余输出
#              additivity: false
#              AppenderRef:
#                  - ref: Console
            - name: com.ds
              level: INFO
            - name: log4jdbc.log4j2
              level: INFO
#              MarkerFilter:
#                  - marker: LOG4JDBC_SQL
#                    onMatch: ACCEPT
#                    onMismatch: DENY
#                  - marker: LOG4JDBC_SELECT
#                    onMatch: ACCEPT
#                    onMismatch: DENY


# -:  信息输出时左对齐
# %p: 输出日志信息优先级，即trace，debug，info，warn，error
# %d: 输出日志时间点的日期或时间，默认格式为ISO8601，也可以在其后指定格式，比如：%d{yyyy-MM-dd HH:mm:ss,SSS}，输出类似：2011-10-18 22:10:28,921
# %r: 输出自应用启动到输出该log信息耗费的毫秒数
# %c: 输出日志信息所属的类目，通常就是所在类的全名
# %t: 输出产生该日志事件的线程名
# %l: 输出日志事件的发生位置，相当于%C.%M(%F:%L)的组合,包括类目名、发生的线程，以及在代码中的行数。
# %x: 输出和当前线程相关联的NDC(嵌套诊断环境),尤其用到像java servlets这样的多客户多线程的应用中。
# %%: 输出一个"%"字符
# %F: 输出日志消息产生时所在的文件名称
# %L: 输出代码中的行号
# %m: 输出代码中指定的消息,产生的日志具体信息
# %n: 输出一个回车换行符，Windows平台为"\r\n"，Unix平台为"\n"输出日志信息换行
#
# 可以在%与模式字符之间加上修饰符来控制其最小宽度、最大宽度、和文本的对齐方式。如：
# 1)%20c：指定输出category的名称，最小的宽度是20，如果category的名称小于20的话，默认的情况下右对齐。
# 2)%-20c:指定输出category的名称，最小的宽度是20，如果category的名称小于20的话，"-"号指定左对齐。
# 3)%.30c:指定输出category的名称，最大的宽度是30，如果category的名称大于30的话，就会将左边多出的字符截掉，但小于30的话也不会有空格。
# 4)%20.30c:如果category的名称小于20就补空格，并且右对齐，如果其名称长于30字符，就从左边交远销出的字符截掉